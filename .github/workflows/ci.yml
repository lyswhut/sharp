name: CI (GitHub)
on:
  - push

env:
  SHARP_IGNORE_GLOBAL_LIBVIPS: 1
  ELECTRON_BUILD_CMD: node install/libvips && npx prebuild -r electron -t 25.0.0 --strip
  LINUX_INCLUDE: --include-regex '(^libvips-cpp\.so|sharp\.node$)'
  WINDOWS_INCLUDE: --include-regex '(\.dll$|sharp\.node$)'
  MACOS_INCLUDE: --include-regex '(\.dylib$|sharp\.node$)'

jobs:
  prebuild-linux-amd64:
    name: Prebuild on ubuntu-latest
    runs-on: ubuntu-latest
    container: node:16
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          npm install --build-from-source --unsafe-perm
          rm -rf build
          ${{ env.ELECTRON_BUILD_CMD }} ${{ env.LINUX_INCLUDE }} -u ${{ secrets.GH_TOKEN }}
          ls build/Release
  prebuild-linux-arm:
    strategy:
      matrix:
        arch:
          - arm/v7
          - arm64
    name: Prebuild on Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm,arm64
      - run: |
          docker run --rm -v $(pwd):/tmp/project --entrypoint /bin/sh --platform linux/${{ matrix.arch }} node:16 -c "\
          cd /tmp/project && \
          chown root.root . && \
          npm config set cache /tmp/npm-cache --global && \
          npm install --build-from-source --unsafe-perm && \
          rm -rf build && \
          ${{ env.ELECTRON_BUILD_CMD }} ${{ env.LINUX_INCLUDE }} -u ${{ secrets.GH_TOKEN }} && \
          ls build/Release"
